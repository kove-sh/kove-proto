syntax = "proto3";

package k8s.v1;

import "k8s/v1/types.proto";

service Service {
  rpc ListContexts(ListContextsRequest) returns (ListContextsResponse) {}
  rpc SetContext(SetContextRequest) returns (SetContextResponse) {}
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {}
  rpc ListPods(ListPodsRequest) returns (ListPodsResponse) {}
  rpc GetPod(GetPodRequest) returns (GetPodResponse) {}
  rpc StreamPodLogs(StreamPodLogsRequest) returns (stream StreamPodLogsResponse) {}
  rpc PortForwardPod(PortForwardPodRequest) returns (PortForwardPodResponse) {}
  rpc StopForwardedPort(StopForwardedPortRequest) returns (StopForwardedPortResponse) {}
  rpc CheckForwardedPortsHealth(CheckForwardedPortsHealthRequest) returns (CheckForwardedPortsHealthResponse) {}
}

message ListContextsRequest {}

message ListContextsResponse {
  repeated Context contexts = 1;
}

message SetContextRequest {
  string context = 1;
}

message SetContextResponse {}

message ListNamespacesRequest {}

message ListNamespacesResponse {
  repeated string namespaces = 1;
}

message ListPodsRequest {
  string namespace = 1;
}

message ListPodsResponse {
  repeated Pod pods = 1;
}

message GetPodRequest {
  string namespace = 1;
  string pod_name = 2;
}

message GetPodResponse {
  Pod pod = 1;
}

message StreamPodLogsRequest {
  string namespace = 1;
  string pod_name = 2;
  repeated string containers = 3;
  int64 since_seconds = 4;
}

message StreamPodLogsResponse {
  repeated ContainerLog log_batch = 1;
}

message PortForwardPodRequest {
  string namespace = 1;
  string pod_name = 2;
  int32 local_port = 3;
  int32 remote_port = 4;
}

message PortForwardPodResponse {
  string port_forward_id = 1;
}

message StopForwardedPortRequest {
  string port_forward_id = 1;
}

message StopForwardedPortResponse {}

message CheckForwardedPortsHealthRequest {
  repeated string port_forward_ids = 1;
}

message CheckForwardedPortsHealthResponse {
  message PortHealth {
    string port_forward_id = 1;
    bool healthy = 2;
    optional string error = 3;
  }

  repeated PortHealth ports = 1;
}
