// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: k8s/v1/deployment.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct K8s_V1_Deployment: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var meta: K8s_V1_ObjectMeta {
    get {return _storage._meta ?? K8s_V1_ObjectMeta()}
    set {_uniqueStorage()._meta = newValue}
  }
  /// Returns true if `meta` has been explicitly set.
  public var hasMeta: Bool {return _storage._meta != nil}
  /// Clears the value of `meta`. Subsequent reads from it will return its default value.
  public mutating func clearMeta() {_uniqueStorage()._meta = nil}

  /// formatted label selector
  public var selector: String {
    get {return _storage._selector}
    set {_uniqueStorage()._selector = newValue}
  }

  /// unique container images
  public var images: [String] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  public var replicas: Int32 {
    get {return _storage._replicas ?? 0}
    set {_uniqueStorage()._replicas = newValue}
  }
  /// Returns true if `replicas` has been explicitly set.
  public var hasReplicas: Bool {return _storage._replicas != nil}
  /// Clears the value of `replicas`. Subsequent reads from it will return its default value.
  public mutating func clearReplicas() {_uniqueStorage()._replicas = nil}

  public var updatedReplicas: Int32 {
    get {return _storage._updatedReplicas}
    set {_uniqueStorage()._updatedReplicas = newValue}
  }

  public var readyReplicas: Int32 {
    get {return _storage._readyReplicas}
    set {_uniqueStorage()._readyReplicas = newValue}
  }

  public var availableReplicas: Int32 {
    get {return _storage._availableReplicas}
    set {_uniqueStorage()._availableReplicas = newValue}
  }

  public var unavailableReplicas: Int32 {
    get {return _storage._unavailableReplicas}
    set {_uniqueStorage()._unavailableReplicas = newValue}
  }

  public var generation: Int64 {
    get {return _storage._generation}
    set {_uniqueStorage()._generation = newValue}
  }

  public var observedGeneration: Int64 {
    get {return _storage._observedGeneration}
    set {_uniqueStorage()._observedGeneration = newValue}
  }

  public var strategy: K8s_V1_DeploymentStrategy {
    get {return _storage._strategy ?? K8s_V1_DeploymentStrategy()}
    set {_uniqueStorage()._strategy = newValue}
  }
  /// Returns true if `strategy` has been explicitly set.
  public var hasStrategy: Bool {return _storage._strategy != nil}
  /// Clears the value of `strategy`. Subsequent reads from it will return its default value.
  public mutating func clearStrategy() {_uniqueStorage()._strategy = nil}

  public var conditions: [K8s_V1_DeploymentCondition] {
    get {return _storage._conditions}
    set {_uniqueStorage()._conditions = newValue}
  }

  public var pods: [K8s_V1_PodSummary] {
    get {return _storage._pods}
    set {_uniqueStorage()._pods = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Mirrors the essentials of apps/v1.DeploymentStrategy.
public struct K8s_V1_DeploymentStrategy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: String = String()

  /// Present when type == ROLLING_UPDATE.
  public var rollingUpdate: K8s_V1_RollingUpdateDeployment {
    get {return _rollingUpdate ?? K8s_V1_RollingUpdateDeployment()}
    set {_rollingUpdate = newValue}
  }
  /// Returns true if `rollingUpdate` has been explicitly set.
  public var hasRollingUpdate: Bool {return self._rollingUpdate != nil}
  /// Clears the value of `rollingUpdate`. Subsequent reads from it will return its default value.
  public mutating func clearRollingUpdate() {self._rollingUpdate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rollingUpdate: K8s_V1_RollingUpdateDeployment? = nil
}

/// Mirrors the key fields of apps/v1.RollingUpdateDeployment.
/// Kubernetes uses IntOrString for these; encode as strings (e.g., "25%", "1").
public struct K8s_V1_RollingUpdateDeployment: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var maxUnavailable: String = String()

  public var maxSurge: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Mirrors the essentials of apps/v1.DeploymentCondition.
public struct K8s_V1_DeploymentCondition: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: String = String()

  public var status: String = String()

  public var reason: String = String()

  public var message: String = String()

  public var lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdateTime = newValue}
  }
  /// Returns true if `lastUpdateTime` has been explicitly set.
  public var hasLastUpdateTime: Bool {return self._lastUpdateTime != nil}
  /// Clears the value of `lastUpdateTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdateTime() {self._lastUpdateTime = nil}

  public var lastTransitionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastTransitionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastTransitionTime = newValue}
  }
  /// Returns true if `lastTransitionTime` has been explicitly set.
  public var hasLastTransitionTime: Bool {return self._lastTransitionTime != nil}
  /// Clears the value of `lastTransitionTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastTransitionTime() {self._lastTransitionTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastTransitionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "k8s.v1"

extension K8s_V1_Deployment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Deployment"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}meta\0\u{1}selector\0\u{1}images\0\u{1}replicas\0\u{3}updated_replicas\0\u{3}ready_replicas\0\u{3}available_replicas\0\u{3}unavailable_replicas\0\u{1}generation\0\u{3}observed_generation\0\u{1}strategy\0\u{1}conditions\0\u{1}pods\0")

  fileprivate class _StorageClass {
    var _meta: K8s_V1_ObjectMeta? = nil
    var _selector: String = String()
    var _images: [String] = []
    var _replicas: Int32? = nil
    var _updatedReplicas: Int32 = 0
    var _readyReplicas: Int32 = 0
    var _availableReplicas: Int32 = 0
    var _unavailableReplicas: Int32 = 0
    var _generation: Int64 = 0
    var _observedGeneration: Int64 = 0
    var _strategy: K8s_V1_DeploymentStrategy? = nil
    var _conditions: [K8s_V1_DeploymentCondition] = []
    var _pods: [K8s_V1_PodSummary] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _meta = source._meta
      _selector = source._selector
      _images = source._images
      _replicas = source._replicas
      _updatedReplicas = source._updatedReplicas
      _readyReplicas = source._readyReplicas
      _availableReplicas = source._availableReplicas
      _unavailableReplicas = source._unavailableReplicas
      _generation = source._generation
      _observedGeneration = source._observedGeneration
      _strategy = source._strategy
      _conditions = source._conditions
      _pods = source._pods
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._meta) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._selector) }()
        case 3: try { try decoder.decodeRepeatedStringField(value: &_storage._images) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._replicas) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._updatedReplicas) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._readyReplicas) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._availableReplicas) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._unavailableReplicas) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._generation) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._observedGeneration) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._strategy) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._conditions) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._pods) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._meta {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._selector.isEmpty {
        try visitor.visitSingularStringField(value: _storage._selector, fieldNumber: 2)
      }
      if !_storage._images.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._images, fieldNumber: 3)
      }
      try { if let v = _storage._replicas {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      } }()
      if _storage._updatedReplicas != 0 {
        try visitor.visitSingularInt32Field(value: _storage._updatedReplicas, fieldNumber: 5)
      }
      if _storage._readyReplicas != 0 {
        try visitor.visitSingularInt32Field(value: _storage._readyReplicas, fieldNumber: 6)
      }
      if _storage._availableReplicas != 0 {
        try visitor.visitSingularInt32Field(value: _storage._availableReplicas, fieldNumber: 7)
      }
      if _storage._unavailableReplicas != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unavailableReplicas, fieldNumber: 8)
      }
      if _storage._generation != 0 {
        try visitor.visitSingularInt64Field(value: _storage._generation, fieldNumber: 9)
      }
      if _storage._observedGeneration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._observedGeneration, fieldNumber: 10)
      }
      try { if let v = _storage._strategy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if !_storage._conditions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._conditions, fieldNumber: 12)
      }
      if !_storage._pods.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pods, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: K8s_V1_Deployment, rhs: K8s_V1_Deployment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._meta != rhs_storage._meta {return false}
        if _storage._selector != rhs_storage._selector {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._replicas != rhs_storage._replicas {return false}
        if _storage._updatedReplicas != rhs_storage._updatedReplicas {return false}
        if _storage._readyReplicas != rhs_storage._readyReplicas {return false}
        if _storage._availableReplicas != rhs_storage._availableReplicas {return false}
        if _storage._unavailableReplicas != rhs_storage._unavailableReplicas {return false}
        if _storage._generation != rhs_storage._generation {return false}
        if _storage._observedGeneration != rhs_storage._observedGeneration {return false}
        if _storage._strategy != rhs_storage._strategy {return false}
        if _storage._conditions != rhs_storage._conditions {return false}
        if _storage._pods != rhs_storage._pods {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_V1_DeploymentStrategy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeploymentStrategy"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}type\0\u{3}rolling_update\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rollingUpdate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    try { if let v = self._rollingUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: K8s_V1_DeploymentStrategy, rhs: K8s_V1_DeploymentStrategy) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._rollingUpdate != rhs._rollingUpdate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_V1_RollingUpdateDeployment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RollingUpdateDeployment"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}max_unavailable\0\u{3}max_surge\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.maxUnavailable) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.maxSurge) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.maxUnavailable.isEmpty {
      try visitor.visitSingularStringField(value: self.maxUnavailable, fieldNumber: 1)
    }
    if !self.maxSurge.isEmpty {
      try visitor.visitSingularStringField(value: self.maxSurge, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: K8s_V1_RollingUpdateDeployment, rhs: K8s_V1_RollingUpdateDeployment) -> Bool {
    if lhs.maxUnavailable != rhs.maxUnavailable {return false}
    if lhs.maxSurge != rhs.maxSurge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_V1_DeploymentCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeploymentCondition"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}type\0\u{1}status\0\u{1}reason\0\u{1}message\0\u{3}last_update_time\0\u{3}last_transition_time\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._lastUpdateTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._lastTransitionTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 2)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 3)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 4)
    }
    try { if let v = self._lastUpdateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._lastTransitionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: K8s_V1_DeploymentCondition, rhs: K8s_V1_DeploymentCondition) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.status != rhs.status {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.message != rhs.message {return false}
    if lhs._lastUpdateTime != rhs._lastUpdateTime {return false}
    if lhs._lastTransitionTime != rhs._lastTransitionTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
