// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: k8s/v1/deployment.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct K8s_V1_Deployment: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var namespace: String = String()

  public var name: String = String()

  /// formatted label selector
  public var selector: String = String()

  /// unique container images
  public var images: [String] = []

  public var replicas: Int32 {
    get {return _replicas ?? 0}
    set {_replicas = newValue}
  }
  /// Returns true if `replicas` has been explicitly set.
  public var hasReplicas: Bool {return self._replicas != nil}
  /// Clears the value of `replicas`. Subsequent reads from it will return its default value.
  public mutating func clearReplicas() {self._replicas = nil}

  public var updatedReplicas: Int32 = 0

  public var readyReplicas: Int32 = 0

  public var availableReplicas: Int32 = 0

  public var unavailableReplicas: Int32 = 0

  public var generation: Int64 = 0

  public var observedGeneration: Int64 = 0

  public var strategy: K8s_V1_DeploymentStrategy {
    get {return _strategy ?? K8s_V1_DeploymentStrategy()}
    set {_strategy = newValue}
  }
  /// Returns true if `strategy` has been explicitly set.
  public var hasStrategy: Bool {return self._strategy != nil}
  /// Clears the value of `strategy`. Subsequent reads from it will return its default value.
  public mutating func clearStrategy() {self._strategy = nil}

  public var conditions: [K8s_V1_DeploymentCondition] = []

  public var pods: [K8s_V1_PodSummary] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _replicas: Int32? = nil
  fileprivate var _strategy: K8s_V1_DeploymentStrategy? = nil
}

/// Mirrors the essentials of apps/v1.DeploymentStrategy.
public struct K8s_V1_DeploymentStrategy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: String = String()

  /// Present when type == ROLLING_UPDATE.
  public var rollingUpdate: K8s_V1_RollingUpdateDeployment {
    get {return _rollingUpdate ?? K8s_V1_RollingUpdateDeployment()}
    set {_rollingUpdate = newValue}
  }
  /// Returns true if `rollingUpdate` has been explicitly set.
  public var hasRollingUpdate: Bool {return self._rollingUpdate != nil}
  /// Clears the value of `rollingUpdate`. Subsequent reads from it will return its default value.
  public mutating func clearRollingUpdate() {self._rollingUpdate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rollingUpdate: K8s_V1_RollingUpdateDeployment? = nil
}

/// Mirrors the key fields of apps/v1.RollingUpdateDeployment.
/// Kubernetes uses IntOrString for these; encode as strings (e.g., "25%", "1").
public struct K8s_V1_RollingUpdateDeployment: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var maxUnavailable: String = String()

  public var maxSurge: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Mirrors the essentials of apps/v1.DeploymentCondition.
public struct K8s_V1_DeploymentCondition: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: String = String()

  public var status: String = String()

  public var reason: String = String()

  public var message: String = String()

  public var lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdateTime = newValue}
  }
  /// Returns true if `lastUpdateTime` has been explicitly set.
  public var hasLastUpdateTime: Bool {return self._lastUpdateTime != nil}
  /// Clears the value of `lastUpdateTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdateTime() {self._lastUpdateTime = nil}

  public var lastTransitionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastTransitionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastTransitionTime = newValue}
  }
  /// Returns true if `lastTransitionTime` has been explicitly set.
  public var hasLastTransitionTime: Bool {return self._lastTransitionTime != nil}
  /// Clears the value of `lastTransitionTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastTransitionTime() {self._lastTransitionTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastTransitionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "k8s.v1"

extension K8s_V1_Deployment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Deployment"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}namespace\0\u{1}name\0\u{1}selector\0\u{1}images\0\u{1}replicas\0\u{3}updated_replicas\0\u{3}ready_replicas\0\u{3}available_replicas\0\u{3}unavailable_replicas\0\u{1}generation\0\u{3}observed_generation\0\u{1}strategy\0\u{1}conditions\0\u{1}pods\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.selector) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.images) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._replicas) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.updatedReplicas) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.readyReplicas) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.availableReplicas) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.unavailableReplicas) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.generation) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.observedGeneration) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._strategy) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.conditions) }()
      case 14: try { try decoder.decodeRepeatedMessageField(value: &self.pods) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.selector.isEmpty {
      try visitor.visitSingularStringField(value: self.selector, fieldNumber: 3)
    }
    if !self.images.isEmpty {
      try visitor.visitRepeatedStringField(value: self.images, fieldNumber: 4)
    }
    try { if let v = self._replicas {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    if self.updatedReplicas != 0 {
      try visitor.visitSingularInt32Field(value: self.updatedReplicas, fieldNumber: 6)
    }
    if self.readyReplicas != 0 {
      try visitor.visitSingularInt32Field(value: self.readyReplicas, fieldNumber: 7)
    }
    if self.availableReplicas != 0 {
      try visitor.visitSingularInt32Field(value: self.availableReplicas, fieldNumber: 8)
    }
    if self.unavailableReplicas != 0 {
      try visitor.visitSingularInt32Field(value: self.unavailableReplicas, fieldNumber: 9)
    }
    if self.generation != 0 {
      try visitor.visitSingularInt64Field(value: self.generation, fieldNumber: 10)
    }
    if self.observedGeneration != 0 {
      try visitor.visitSingularInt64Field(value: self.observedGeneration, fieldNumber: 11)
    }
    try { if let v = self._strategy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    if !self.conditions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conditions, fieldNumber: 13)
    }
    if !self.pods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pods, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: K8s_V1_Deployment, rhs: K8s_V1_Deployment) -> Bool {
    if lhs.namespace != rhs.namespace {return false}
    if lhs.name != rhs.name {return false}
    if lhs.selector != rhs.selector {return false}
    if lhs.images != rhs.images {return false}
    if lhs._replicas != rhs._replicas {return false}
    if lhs.updatedReplicas != rhs.updatedReplicas {return false}
    if lhs.readyReplicas != rhs.readyReplicas {return false}
    if lhs.availableReplicas != rhs.availableReplicas {return false}
    if lhs.unavailableReplicas != rhs.unavailableReplicas {return false}
    if lhs.generation != rhs.generation {return false}
    if lhs.observedGeneration != rhs.observedGeneration {return false}
    if lhs._strategy != rhs._strategy {return false}
    if lhs.conditions != rhs.conditions {return false}
    if lhs.pods != rhs.pods {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_V1_DeploymentStrategy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeploymentStrategy"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}type\0\u{3}rolling_update\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rollingUpdate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    try { if let v = self._rollingUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: K8s_V1_DeploymentStrategy, rhs: K8s_V1_DeploymentStrategy) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._rollingUpdate != rhs._rollingUpdate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_V1_RollingUpdateDeployment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RollingUpdateDeployment"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}max_unavailable\0\u{3}max_surge\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.maxUnavailable) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.maxSurge) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.maxUnavailable.isEmpty {
      try visitor.visitSingularStringField(value: self.maxUnavailable, fieldNumber: 1)
    }
    if !self.maxSurge.isEmpty {
      try visitor.visitSingularStringField(value: self.maxSurge, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: K8s_V1_RollingUpdateDeployment, rhs: K8s_V1_RollingUpdateDeployment) -> Bool {
    if lhs.maxUnavailable != rhs.maxUnavailable {return false}
    if lhs.maxSurge != rhs.maxSurge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_V1_DeploymentCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeploymentCondition"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}type\0\u{1}status\0\u{1}reason\0\u{1}message\0\u{3}last_update_time\0\u{3}last_transition_time\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._lastUpdateTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._lastTransitionTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 2)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 3)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 4)
    }
    try { if let v = self._lastUpdateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._lastTransitionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: K8s_V1_DeploymentCondition, rhs: K8s_V1_DeploymentCondition) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.status != rhs.status {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.message != rhs.message {return false}
    if lhs._lastUpdateTime != rhs._lastUpdateTime {return false}
    if lhs._lastTransitionTime != rhs._lastTransitionTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
