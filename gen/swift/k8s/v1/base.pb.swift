// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: k8s/v1/base.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct K8s_V1_Context: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var cluster: String = String()

  public var defaultNamespace: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1@v0.33.3#ObjectMeta
public struct K8s_V1_ObjectMeta: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var namespace: String = String()

  public var generateName: String = String()

  public var uid: String = String()

  public var resourceVersion: String = String()

  public var generation: Int64 = 0

  public var creationTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _creationTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_creationTimestamp = newValue}
  }
  /// Returns true if `creationTimestamp` has been explicitly set.
  public var hasCreationTimestamp: Bool {return self._creationTimestamp != nil}
  /// Clears the value of `creationTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTimestamp() {self._creationTimestamp = nil}

  public var deletionTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _deletionTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_deletionTimestamp = newValue}
  }
  /// Returns true if `deletionTimestamp` has been explicitly set.
  public var hasDeletionTimestamp: Bool {return self._deletionTimestamp != nil}
  /// Clears the value of `deletionTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearDeletionTimestamp() {self._deletionTimestamp = nil}

  public var deletionGracePeriodSeconds: Int64 {
    get {return _deletionGracePeriodSeconds ?? 0}
    set {_deletionGracePeriodSeconds = newValue}
  }
  /// Returns true if `deletionGracePeriodSeconds` has been explicitly set.
  public var hasDeletionGracePeriodSeconds: Bool {return self._deletionGracePeriodSeconds != nil}
  /// Clears the value of `deletionGracePeriodSeconds`. Subsequent reads from it will return its default value.
  public mutating func clearDeletionGracePeriodSeconds() {self._deletionGracePeriodSeconds = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _creationTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _deletionTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _deletionGracePeriodSeconds: Int64? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "k8s.v1"

extension K8s_V1_Context: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Context"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}cluster\0\u{3}default_namespace\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cluster) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.defaultNamespace) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.cluster.isEmpty {
      try visitor.visitSingularStringField(value: self.cluster, fieldNumber: 2)
    }
    if !self.defaultNamespace.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultNamespace, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: K8s_V1_Context, rhs: K8s_V1_Context) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.cluster != rhs.cluster {return false}
    if lhs.defaultNamespace != rhs.defaultNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_V1_ObjectMeta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectMeta"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}namespace\0\u{3}generate_name\0\u{1}uid\0\u{3}resource_version\0\u{1}generation\0\u{3}creation_timestamp\0\u{3}deletion_timestamp\0\u{3}deletion_grace_period_seconds\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.generateName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.uid) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.resourceVersion) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.generation) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._creationTimestamp) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._deletionTimestamp) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self._deletionGracePeriodSeconds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 2)
    }
    if !self.generateName.isEmpty {
      try visitor.visitSingularStringField(value: self.generateName, fieldNumber: 3)
    }
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 4)
    }
    if !self.resourceVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceVersion, fieldNumber: 5)
    }
    if self.generation != 0 {
      try visitor.visitSingularInt64Field(value: self.generation, fieldNumber: 6)
    }
    try { if let v = self._creationTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._deletionTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._deletionGracePeriodSeconds {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: K8s_V1_ObjectMeta, rhs: K8s_V1_ObjectMeta) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.namespace != rhs.namespace {return false}
    if lhs.generateName != rhs.generateName {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.resourceVersion != rhs.resourceVersion {return false}
    if lhs.generation != rhs.generation {return false}
    if lhs._creationTimestamp != rhs._creationTimestamp {return false}
    if lhs._deletionTimestamp != rhs._deletionTimestamp {return false}
    if lhs._deletionGracePeriodSeconds != rhs._deletionGracePeriodSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
